// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Synopsis.Infrastructure.DbContext;
using SynopsisV2.Infrastructure.Persistence;

#nullable disable

namespace Synopsis.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class SynopsisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AgendaRowSpeakerRow", b =>
                {
                    b.Property<Guid>("AgendasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SpeakersId")
                        .HasColumnType("int");

                    b.HasKey("AgendasId", "SpeakersId");

                    b.HasIndex("SpeakersId");

                    b.ToTable("AgendaRowSpeakerRow");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.AgendaRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SynopsisType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.ErrorRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnOrder(1);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.FeedbackRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateTimeSend")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.LogoRow", b =>
                {
                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.HasKey("Logo", "SpeakerId");

                    b.HasIndex("SpeakerId", "Logo")
                        .IsUnique();

                    b.ToTable("Logos");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.PartnerRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Important")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int?>("IsShow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<int?>("SynopsisType")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.SiteRow", b =>
                {
                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpeakerId", "Link");

                    b.HasIndex("SpeakerId", "Link")
                        .IsUnique();

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.SpeakerRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BiographyEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BiographyRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Important")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("IsCommission")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("IsFavorite")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<int?>("IsShow")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameRu")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int")
                        .HasColumnName("PartnerId")
                        .HasColumnOrder(12);

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.Property<string>("PositionEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<string>("PositionRu")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<int?>("SynopsisType")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.HasKey("Id")
                        .HasName("PK__Speakers__02899F87A657070E");

                    b.HasIndex("PartnerId");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.TicketRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6);

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7);

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("WalletBsc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WalletBSC")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AgendaRowSpeakerRow", b =>
                {
                    b.HasOne("Synopsis.Infrastructure.DbContext.Entities.AgendaRow", null)
                        .WithMany()
                        .HasForeignKey("AgendasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Synopsis.Infrastructure.DbContext.Entities.SpeakerRow", null)
                        .WithMany()
                        .HasForeignKey("SpeakersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.LogoRow", b =>
                {
                    b.HasOne("Synopsis.Infrastructure.DbContext.Entities.SpeakerRow", "Speaker")
                        .WithMany("Logos")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.SiteRow", b =>
                {
                    b.HasOne("Synopsis.Infrastructure.DbContext.Entities.SpeakerRow", "Speaker")
                        .WithMany("Sites")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.SpeakerRow", b =>
                {
                    b.HasOne("Synopsis.Infrastructure.DbContext.Entities.PartnerRow", "Partner")
                        .WithMany("Speakers")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.PartnerRow", b =>
                {
                    b.Navigation("Speakers");
                });

            modelBuilder.Entity("Synopsis.Infrastructure.DbContext.Entities.SpeakerRow", b =>
                {
                    b.Navigation("Logos");

                    b.Navigation("Sites");
                });
#pragma warning restore 612, 618
        }
    }
}
